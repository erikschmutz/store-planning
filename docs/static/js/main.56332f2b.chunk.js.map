{"version":3,"sources":["views/ImageTransition.module.scss","utils/StoreMapUtils.module.scss","components/Badge.tsx","components/Card.tsx","components/Divider.tsx","components/Title.tsx","assets/items.svg","assets/image.png","views/ImageTransition.tsx","components/Button.tsx","utils/Navigator.ts","pages/Data.tsx","utils/StoreMapUtils.ts","views/StoreMap.tsx","components/Typography.tsx","api/Area.ts","pages/AreaSelect.tsx","components/Modal.tsx","components/Input.tsx","components/Selector.tsx","pages/AddTime.tsx","App.tsx","index.tsx"],"names":["module","exports","Badge","props","children","onClick","className","Card","onClose","Divider","defaultClass","classnames","Title","level","el","h1","h2","h3","levelClass","ImageTransition","image","svg","onComplete","useEffect","setTimeout","id","style","src","alt","overlay","Button","size","type","disable","typeClass","primary","secondary","ghost","sizeClass","md","lg","sm","disabled","undefined","Navigator","config","params","queryParams","URLSearchParams","key","set","path","toString","Data","history","useHistory","push","build","StoreMapUtils","element","fn","slice","call","child","recursiveForEach","attributes","getNamedItem","value","StoreMap","onHover","markedIds","onItemClick","useState","scale","setScale","Controller","transform","transformOrigin","beforeInjection","item","tagName","elementId","getId","classList","add","HOVERABLE_ITEM","onmouseenter","e","Error","onclick","includes","MARKED_ITEM","Typography","error","default","defaultClasses","Area","areasId","localStorage","setItem","JSON","stringify","areas","getItem","parse","events","event","dates","this","getEvents","filter","v","Date","now","Store","marked","setMarked","console","log","storeSelectedAreas","Modal","visible","React","forwardRef","ref","password","placeholder","onChange","defaultValue","name","Option","AddTime","useForm","register","handleSubmit","errors","setSelected","setEvents","viewModal","setViewModal","getSelectedAreas","map","deleteEvent","startWeek","endWeek","onSubmit","form","addEvent","getEventId","Number","parseInt","Input","Array","fill","_","i","browserHistory","createBrowserHistory","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.56332f2b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"image\":\"ImageTransition_image__2IZn2\",\"overlay-animation\":\"ImageTransition_overlay-animation__2cmwW\",\"image-animation\":\"ImageTransition_image-animation__3XsMH\",\"overlay\":\"ImageTransition_overlay__13QUy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"hoverable-item\":\"StoreMapUtils_hoverable-item__2tfT5\",\"marked-item\":\"StoreMapUtils_marked-item__3xzvz\"};","import { ReactNode } from 'react';\n\ninterface BadgeInput {\n    children: ReactNode;\n    onClick: () => void;\n}\n\nexport default function Badge(props: BadgeInput) {\n    const { children, onClick } = props;\n    return (\n        <div\n            onClick={onClick}\n            className=\"text-sm text-center rounded-full cursor-pointer w-5 h-5 bg-white hover:bg-red-500 border absolute left-0 top-0 transform -translate-x-1/2 -translate-y-1/2\"\n        >\n            {children}\n        </div>\n    );\n}\n","import Badge from './Badge';\nimport { BaseProps } from './Props';\n\ninterface CardInput extends BaseProps {\n    children: React.ReactNode;\n    onClose?: () => void;\n}\n\nexport default function Card(props: CardInput) {\n    const { children, className, onClose } = props;\n\n    return (\n        <div className={`shadow-md p-10 bg-white rounded ${className}`}>\n            {onClose && <Badge onClick={onClose}>x</Badge>}\n            {children}\n        </div>\n    );\n}\n","import { BaseProps } from './Props';\nimport { classnames } from 'tailwindcss-classnames';\n\nexport default function Divider(props: BaseProps) {\n    const { className } = props;\n\n    const defaultClass: string = classnames('bg-gray-400', 'mb-5', 'mt-5');\n\n    return <hr className={`${defaultClass} ${className}`} />;\n}\n","import { BaseProps } from './Props';\nimport { classnames } from 'tailwindcss-classnames';\n\ninterface TitleInput extends BaseProps {\n    children: React.ReactNode;\n    level?: 'h1' | 'h2' | 'h3';\n}\n\ntype NativeHTMLElementProps = React.DetailedHTMLProps<\n    React.HTMLAttributes<HTMLHeadingElement>,\n    HTMLHeadingElement\n>;\n\nexport default function Title(props: TitleInput) {\n    const { children, className, level = 'h1' } = props;\n\n    const el = {\n        h1: (props: NativeHTMLElementProps) => (\n            <h1 {...props}>{props.children}</h1>\n        ),\n        h2: (props: NativeHTMLElementProps) => (\n            <h2 {...props}>{props.children}</h2>\n        ),\n        h3: (props: NativeHTMLElementProps) => (\n            <h3 {...props}>{props.children}</h3>\n        ),\n    }[level];\n\n    const levelClass = {\n        h1: classnames('text-6xl', 'font-bold'),\n        h2: '',\n        h3: '',\n    }[level];\n\n    const defaultClass: string = classnames('mb-5');\n\n    const config: NativeHTMLElementProps = {\n        className: `${levelClass} ${defaultClass} ${className}`,\n        children: children,\n    };\n\n    return el(config);\n}\n","export default __webpack_public_path__ + \"static/media/items.03a6460a.svg\";","export default __webpack_public_path__ + \"static/media/image.bc958827.png\";","import { useEffect } from 'react';\nimport style from './ImageTransition.module.scss';\n\ninterface ImageTransitionProps {\n    svg: string;\n    image: string;\n    className?: string;\n    onComplete: () => void;\n}\n\nexport function ImageTransition(props: ImageTransitionProps) {\n    const { image, svg, className, onComplete } = props;\n\n    useEffect(() => {\n        setTimeout(onComplete, 5000);\n    }, [onComplete]);\n\n    return (\n        <div className={`${className}`}>\n            <div className=\"relative w-full h-full \">\n                <img\n                    id={style.image}\n                    src={image}\n                    alt=\"background \"\n                    className=\"absolute max-h-full max-w-full transform -translate-x-1/2 left-1/2\"\n                />\n                <img\n                    src={svg}\n                    id={style.overlay}\n                    alt=\"overlay\"\n                    className=\"absolute max-h-full max-w-full transform -translate-x-1/2 left-1/2\"\n                />\n            </div>\n        </div>\n    );\n}\n","import { OnClickProps } from './Props';\nimport { classnames } from 'tailwindcss-classnames';\n\ntype ButtonSize = 'lg' | 'md' | 'sm';\ntype ButtonType = 'primary' | 'ghost' | 'secondary';\ntype OnClickEvent = React.MouseEvent<HTMLButtonElement, MouseEvent>;\n\ninterface ButtonInput extends OnClickProps<OnClickEvent> {\n    size?: ButtonSize;\n    type?: ButtonType;\n    disable?: boolean;\n    children: string;\n}\n\nexport default function Button(props: ButtonInput) {\n    const {\n        children,\n        size = 'md',\n        onClick,\n        type = 'primary',\n        className,\n        disable,\n    } = props;\n\n    const typeClass: string = {\n        primary: classnames('bg-blue-900', 'hover:bg-blue-500', 'text-white'),\n        secondary: classnames(\n            'hover:shadow',\n            'text-black',\n            'border',\n            'bg-white',\n        ),\n        ghost: '',\n    }[type];\n\n    const sizeClass: string = {\n        md: '',\n        lg: '',\n        sm: '',\n    }[size];\n\n    const defaultClass: string = classnames(\n        'outline-none',\n        'focus:outline-none',\n        'rounded-full',\n        'p-2',\n        'pl-5',\n        'pr-5',\n        'transition-all',\n        'ml-1',\n        'mr-1',\n    );\n\n    const disabled = disable ? classnames('text-opacity-40') : '';\n\n    return (\n        <button\n            onClick={!disable ? onClick : undefined}\n            className={`${defaultClass} ${typeClass} ${sizeClass} ${disabled} ${className}`}\n        >\n            {children}\n        </button>\n    );\n}\n","/**\n *\n */\n\ntype LoginLinkConfig = GenericLinkConfig<'/login', null>;\ntype StoreConfig = GenericLinkConfig<'/area-select', null>;\ntype AddTimeConfig = GenericLinkConfig<'/add-time', null>;\ntype DataLinkConfig = GenericLinkConfig<\n    '/data',\n    {\n        username: string;\n    }\n>;\ntype LinkConfig =\n    | LoginLinkConfig\n    | DataLinkConfig\n    | StoreConfig\n    | AddTimeConfig;\n\nexport class Navigator {\n    static build(config: LinkConfig) {\n        if ('params' in config && config.params !== null) {\n            const { params } = config as GenericLinkConfig<\n                string,\n                Record<string, string>\n            >;\n            const queryParams = new URLSearchParams();\n\n            for (const key in params) {\n                if (params[key]) queryParams.set(key, params[key]);\n            }\n\n            return `${config.path}?${queryParams.toString()}`;\n        }\n\n        return config.path;\n    }\n}\n\n/**\n *\n * Static types which help out to ensure we create the correct\n * structure of link config\n */\ntype Params = Record<string, string> | null;\ntype ConfigWithParams<T, P extends Params> = {\n    path: T;\n    params: P;\n};\ntype ConfigWithoutParams<T> = {\n    path: T;\n};\ntype GenericLinkConfig<T, P extends Params> = P extends null\n    ? ConfigWithoutParams<T>\n    : ConfigWithParams<T, P>;\n","import Card from 'src/components/Card';\nimport Divider from 'src/components/Divider';\nimport Title from 'src/components/Title';\nimport Typography from 'src/components/Typography';\nimport Movie from 'src/views/Movie';\nimport overlay from 'src/assets/items.svg';\nimport image from 'src/assets/image.png';\nimport { ImageTransition } from 'src/views/ImageTransition';\nimport Button from 'src/components/Button';\nimport { useHistory } from 'react-router-dom';\nimport { Navigator } from 'src/utils/Navigator';\n\nexport default function Data() {\n    const history = useHistory();\n\n    return (\n        <div className=\"flex\">\n            <Card className=\"w-screen h-screen flex flex-col lg:w-4/6 m-auto\">\n                <Title className=\"flex \" level=\"h1\">\n                    Tolkar din butik...\n                </Title>\n\n                <Divider />\n\n                <ImageTransition\n                    className=\"flex-1 w-full mx-auto text-lg h-full rounded overflow-hidden\"\n                    image={image}\n                    svg={overlay}\n                    onComplete={() => {\n                        history.push(Navigator.build({ path: '/area-select' }));\n                    }}\n                />\n\n                <div className=\"w-full \">\n                    <Button\n                        className=\"float-right\"\n                        onClick={() => {\n                            history.push(\n                                Navigator.build({ path: '/area-select' }),\n                            );\n                        }}\n                    >\n                        Gå vidare\n                    </Button>\n                </div>\n            </Card>\n        </div>\n    );\n}\n","import style from './StoreMapUtils.module.scss';\n\nexport class StoreMapUtils {\n    static HOVERABLE_ITEM = style['hoverable-item'];\n    static MARKED_ITEM = style['marked-item'];\n\n    static recursiveForEach(\n        element: SVGElement,\n        fn: (el: SVGElement) => void,\n    ): void {\n        for (const child of [].slice.call(element.children)) {\n            StoreMapUtils.recursiveForEach(child as SVGElement, fn);\n        }\n\n        fn(element);\n    }\n\n    static getId(element: SVGElement): string | undefined {\n        const attributes = element.attributes;\n        const id = attributes.getNamedItem('id')?.value;\n\n        if (!id) {\n            return undefined;\n        }\n\n        return id;\n    }\n}\n","import { FunctionComponent, SVGProps, useState } from 'react';\nimport { ReactSVG } from 'react-svg';\nimport Button from 'src/components/Button';\nimport { StoreMapUtils } from 'src/utils/StoreMapUtils';\n\ninterface ImageTransitionProps {\n    svg: string;\n    className?: string;\n    onHover?: (id: string) => void;\n    onItemClick?: (id: string) => void;\n    markedIds?: string[];\n}\n\nexport function StoreMap(props: ImageTransitionProps) {\n    const { svg, className, onHover, markedIds, onItemClick } = props;\n    const [scale, setScale] = useState(1.5);\n\n    const Controller = () => {\n        return (\n            <div className=\"float-right fixed z-10\">\n                <Button\n                    disable={scale > 2}\n                    onClick={() => {\n                        setScale(scale + 0.25);\n                    }}\n                    type=\"secondary\"\n                >\n                    +\n                </Button>\n                <Button\n                    disable={scale < 0.5}\n                    onClick={() => {\n                        setScale(scale - 0.25);\n                    }}\n                    type=\"secondary\"\n                >\n                    -\n                </Button>\n            </div>\n        );\n    };\n\n    return (\n        <div className={`relative ${className} `}>\n            <Controller></Controller>\n            <ReactSVG\n                src={svg}\n                style={{\n                    transform: `scale(${scale}, ${scale})`,\n                    transformOrigin: 'left top',\n                }}\n                beforeInjection={(item) => {\n                    StoreMapUtils.recursiveForEach(item, (el) => {\n                        if (el.tagName === 'rect' || el.tagName === 'circle') {\n                            const elementId = StoreMapUtils.getId(el);\n\n                            el.classList.add(StoreMapUtils.HOVERABLE_ITEM);\n\n                            if (onHover) {\n                                el.onmouseenter = (e) => {\n                                    if (!elementId) {\n                                        throw new Error(\n                                            'Not able to hook a listener onto object without id.',\n                                        );\n                                    }\n\n                                    onHover(elementId);\n                                };\n                            }\n\n                            if (onItemClick) {\n                                el.onclick = (e) => {\n                                    if (!elementId) {\n                                        throw new Error(\n                                            'Not able to hook a listener onto object without id.',\n                                        );\n                                    }\n\n                                    onItemClick(elementId);\n                                };\n                            }\n\n                            if (elementId && markedIds?.includes(elementId)) {\n                                el.classList.add(StoreMapUtils.MARKED_ITEM);\n                            }\n                        }\n                    });\n                }}\n            />\n        </div>\n    );\n}\n","import { classnames } from 'tailwindcss-classnames';\nimport { BaseProps } from './Props';\n\ntype TypographySize = 'lg' | 'md' | 'sm';\ntype TypographyType = 'error' | 'default';\n\ninterface TypographyInput extends BaseProps {\n    size?: TypographySize;\n    type?: TypographyType;\n    children: React.ReactNode;\n}\n\nexport default function Typography(props: TypographyInput) {\n    const { children, size = 'md', type = 'default', className } = props;\n\n    const sizeClass: string = {\n        md: '',\n        lg: '',\n        sm: '',\n    }[size];\n\n    const typeClass: string = {\n        error: classnames('text-red-500'),\n        default: '',\n    }[type];\n\n    const defaultClasses: string = classnames('text-base');\n\n    return (\n        <p\n            className={`${typeClass} ${sizeClass} ${defaultClasses} ${className}`}\n        >\n            {children}\n        </p>\n    );\n}\n","export interface Event {\n    id: string;\n    name: string;\n    startWeek?: number;\n    endWeek?: number;\n    areasId?: string[];\n}\n\ninterface IArea {\n    id: string;\n    events: Event[];\n}\n\nexport class Area {\n    static storeSelectedAreas(areasId: string[]) {\n        localStorage.setItem('selected-areas', JSON.stringify(areasId));\n    }\n\n    static getSelectedAreas(): string[] | null {\n        const areas = localStorage.getItem('selected-areas');\n        if (areas === null) return null;\n\n        return JSON.parse(areas) as string[];\n    }\n\n    static getEvents(): Event[] {\n        const events = localStorage.getItem('dates');\n        if (events === null) return [];\n\n        return JSON.parse(events) as Event[];\n    }\n\n    static addEvent(event: Event): void {\n        const dates = this.getEvents();\n        localStorage.setItem('dates', JSON.stringify([...dates, event]));\n    }\n\n    static deleteEvent(id: string) {\n        const dates = this.getEvents();\n        localStorage.setItem(\n            'dates',\n            JSON.stringify([...dates].filter((v) => v.id !== id)),\n        );\n    }\n\n    static getEventId(): string {\n        return Date.now().toString();\n    }\n}\n","import React, { useState } from 'react';\nimport Card from 'src/components/Card';\nimport Divider from 'src/components/Divider';\nimport Title from 'src/components/Title';\nimport { StoreMap } from 'src/views/StoreMap';\nimport svg from 'src/assets/items.svg';\nimport Button from 'src/components/Button';\nimport Typography from 'src/components/Typography';\nimport { Area } from 'src/api/Area';\nimport { useHistory } from 'react-router-dom';\nimport { Navigator } from 'src/utils/Navigator';\n\nexport default function Store() {\n    const [marked, setMarked] = useState<string[]>([]);\n    const history = useHistory();\n\n    return (\n        <Card className=\"w-screen h-screen flex flex-col lg:w-11/12 m-auto\">\n            <Title className=\"flex \" level=\"h1\">\n                Din butik\n            </Title>\n            <Typography>\n                Välj de områden som ni brukar använda för klippriser\n            </Typography>\n\n            <Divider />\n            <div className=\"flex-1 w-full mx-auto text-lg h-full rounded overflow-scroll\">\n                <StoreMap\n                    onItemClick={(id) => {\n                        console.log(id);\n                        if (!marked.includes(id)) setMarked([...marked, id]);\n                    }}\n                    markedIds={marked}\n                    svg={svg}\n                />\n            </div>\n            <div>\n                <Button\n                    className=\"float-right\"\n                    onClick={() => {\n                        Area.storeSelectedAreas(marked);\n                        history.push(Navigator.build({ path: '/add-time' }));\n                    }}\n                >\n                    Välj områden\n                </Button>\n            </div>\n        </Card>\n    );\n}\n","import { ReactNode } from 'react';\nimport Card from './Card';\n\ninterface ModalInput {\n    children: ReactNode;\n    onClose?: () => void;\n    visible: boolean;\n}\n\nfunction Modal(props: ModalInput) {\n    const { visible, children } = props;\n\n    if (!visible) return <></>;\n    return (\n        <div className=\"w-screen h-screen bg-black fixed left-0 top-0 z-50 bg-opacity-70\">\n            <Card className=\"fixed top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 transform z-50\">\n                {children}\n            </Card>\n        </div>\n    );\n}\n\nexport default Modal;\n","import { classnames } from 'tailwindcss-classnames';\nimport { OnChangeProps } from './Props';\nimport React from 'react';\n\nexport type OnChangeEvent = React.ChangeEvent<HTMLInputElement>;\ninterface TextFieldInput extends OnChangeProps<OnChangeEvent> {\n    placeholder?: string;\n    defaultValue?: string;\n    size?: 'lg' | 'md';\n    password?: boolean;\n    name?: string;\n}\n\nexport default React.forwardRef<HTMLInputElement, TextFieldInput>(\n    function TextField(props: TextFieldInput, ref) {\n        const {\n            className,\n            password,\n            placeholder,\n            onChange,\n            size = 'md',\n            defaultValue,\n            name,\n        } = props;\n\n        const defaultClass: string = classnames(\n            'focus:outline-none',\n            'border',\n            'p-1',\n            'rounded',\n            'w-full',\n            'mt-2',\n            'mb-2',\n        );\n\n        const sizeClass: string = {\n            md: '',\n            lg: '',\n        }[size];\n\n        return (\n            <input\n                name={name}\n                ref={ref}\n                placeholder={placeholder}\n                type={password ? 'password' : undefined}\n                className={`${sizeClass} ${defaultClass} ${className}`}\n                defaultValue={defaultValue}\n                onChange={onChange}\n            />\n        );\n    },\n);\n","import React, { ReactNode } from 'react';\nimport { classnames } from 'tailwindcss-classnames';\nimport { OnChangeProps } from './Props';\n\ntype OnChangeEvent = React.ChangeEvent<HTMLSelectElement>;\n\ninterface SelectorProps extends OnChangeProps<OnChangeEvent> {\n    children: ReactNode;\n    name?: string;\n}\n\nexport default React.forwardRef<HTMLSelectElement, SelectorProps>(\n    function Selector(props: SelectorProps, ref) {\n        const { className, children, name } = props;\n\n        const defaultClass: string = classnames(\n            'focus:outline-none',\n            'border',\n            'p-1',\n            'rounded',\n            'w-full',\n            'mt-2',\n            'mb-2',\n        );\n\n        return (\n            <select\n                name={name}\n                ref={ref}\n                className={`${defaultClass} ${className}`}\n            >\n                {children}\n            </select>\n        );\n    },\n);\n\ninterface OptionProps {\n    children: ReactNode;\n    value: string;\n}\n\nfunction Option(props: OptionProps) {\n    return <option {...props} className=\"bg-red-600\" />;\n}\n\nexport { Option };\n","import React, { useEffect, useState } from 'react';\nimport Card from 'src/components/Card';\nimport Divider from 'src/components/Divider';\nimport Title from 'src/components/Title';\nimport { StoreMap } from 'src/views/StoreMap';\nimport svg from 'src/assets/items.svg';\nimport Button from 'src/components/Button';\nimport Typography from 'src/components/Typography';\nimport { Area } from 'src/api/Area';\nimport { useHistory } from 'react-router-dom';\nimport { Navigator } from 'src/utils/Navigator';\nimport Modal from 'src/components/Modal';\nimport Input from 'src/components/Input';\nimport Selector, { Option } from 'src/components/Selector';\nimport { useForm } from 'react-hook-form';\nimport { Event } from '../api/Area';\n\ntype FormValues = { startWeek?: string; endWeek?: string; name: string };\n\nexport default function AddTime() {\n    const { register, handleSubmit, errors } = useForm<FormValues>();\n    const [selected, setSelected] = useState<string>();\n    const [events, setEvents] = useState<Event[]>(Area.getEvents());\n    const [viewModal, setViewModal] = useState<boolean>();\n    const history = useHistory();\n    const areas = Area.getSelectedAreas();\n\n    const onFormValid = (form: FormValues) => {\n        Area.addEvent({\n            id: Area.getEventId(),\n            name: form.name,\n            endWeek: !form.endWeek ? undefined : Number.parseInt(form.endWeek),\n            startWeek: !form.startWeek\n                ? undefined\n                : Number.parseInt(form.startWeek),\n        });\n\n        setEvents(Area.getEvents());\n        setViewModal(false);\n    };\n\n    const onFormInvalid = () => {};\n\n    return (\n        <Card className=\"w-screen h-screen flex flex-col lg:w-11/12 m-auto\">\n            <Title className=\"flex \" level=\"h1\">\n                Lägg till klipppriser\n            </Title>\n            <Typography>\n                Klicka på ett område för att lägga dit ett klippris\n            </Typography>\n\n            <div className=\"flex pt-10 pb-10 px-1 w-full overflow-scroll\">\n                {events.map((v) => (\n                    <Card\n                        onClose={() => {\n                            Area.deleteEvent(v.id);\n                            setEvents(Area.getEvents());\n                        }}\n                        className=\"mx-5\"\n                    >\n                        <Typography>{v.name}</Typography>\n                        {v.startWeek && (\n                            <Typography>Start vecka {v.startWeek}</Typography>\n                        )}\n                        {v.endWeek && (\n                            <Typography>Slut vecka {v.endWeek}</Typography>\n                        )}\n                    </Card>\n                ))}\n            </div>\n            <Modal visible={viewModal === true}>\n                <form onSubmit={handleSubmit(onFormValid, onFormInvalid)}>\n                    <Title>Lägg till ny </Title>\n                    <Typography>Namn på produkten</Typography>\n                    <Input name=\"name\" ref={register} />\n                    <Typography>\n                        Start vecka{' '}\n                        <Selector ref={register} name=\"startWeek\">\n                            {new Array(52).fill(0).map((_, i: number) => (\n                                <Option value={i.toString()}>{i}</Option>\n                            ))}\n                        </Selector>\n                    </Typography>\n\n                    <Typography>\n                        Slut vecka{' '}\n                        <Selector ref={register} name=\"endWeek\">\n                            {new Array(52).fill(0).map((_, i: number) => (\n                                <Option value={i.toString()}>{i}</Option>\n                            ))}\n                        </Selector>\n                    </Typography>\n\n                    <Button className=\"float-right mt-5\">Lägg till</Button>\n                </form>\n            </Modal>\n\n            <Divider />\n            <div className=\"flex-1 w-full mx-auto text-lg h-full rounded overflow-scroll\">\n                {areas && (\n                    <StoreMap\n                        onItemClick={(id) => {\n                            setSelected(id);\n                        }}\n                        markedIds={areas}\n                        svg={svg}\n                    />\n                )}\n                {!areas && (\n                    <>\n                        <Title>Du har inte lagd dit några områden</Title>\n                        <Button\n                            className=\"float-right\"\n                            onClick={() => {\n                                history.push(\n                                    Navigator.build({ path: '/area-select' }),\n                                );\n                            }}\n                        >\n                            Välj områden\n                        </Button>\n                    </>\n                )}\n            </div>\n            <div>\n                <Button\n                    className=\"float-right\"\n                    onClick={() => {\n                        setViewModal(true);\n                    }}\n                >\n                    Lägg till nytt klipp\n                </Button>\n            </div>\n        </Card>\n    );\n}\n","import { Route, Router, Switch } from 'react-router-dom';\nimport { createBrowserHistory } from 'history';\nimport Data from './pages/Data';\nimport F0F from './pages/404';\nimport AreaSelect from './pages/AreaSelect';\nimport AddTime from './pages/AddTime';\n\nexport const browserHistory = createBrowserHistory();\n\nexport default function App() {\n    return (\n        <Router history={browserHistory}>\n            <Switch>\n                <Route path=\"/data\">\n                    <Data />\n                </Route>\n                <Route path=\"/area-select\">\n                    <AreaSelect />\n                </Route>\n\n                <Route path=\"\">\n                    <AddTime />\n                </Route>\n            </Switch>\n        </Router>\n    );\n}\n","import App from './App';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport 'rc-notification/assets/index.css';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n"],"sourceRoot":""}