{"version":3,"sources":["views/ImageTransition.module.scss","utils/StoreMapUtils.module.scss","api/Mock.ts","components/Button.tsx","components/Card.tsx","components/Divider.tsx","components/Form.tsx","components/Input.tsx","components/Message.tsx","components/Spinner.tsx","components/Title.tsx","components/Typography.tsx","utils/Navigator.ts","pages/SignIn.tsx","assets/items.svg","assets/image.png","views/ImageTransition.tsx","pages/Data.tsx","pages/404.tsx","utils/StoreMapUtils.ts","views/StoreMap.tsx","pages/Store.tsx","App.tsx","index.tsx"],"names":["module","exports","Mock","username","password","Promise","res","setTimeout","_","rej","Button","props","children","size","onClick","type","className","disable","typeClass","primary","classnames","secondary","ghost","sizeClass","md","lg","sm","defaultClass","disabled","undefined","Card","Divider","Form","onSubmit","onChange","React","forwardRef","ref","placeholder","defaultValue","name","notification","showMessage","notice","duration","style","transform","backgroundColor","color","padding","content","message","onClose","console","log","error","Notification","newInstance","n","Message","success","fail","Spinner","viewBox","focusable","data-icon","width","height","fill","aria-hidden","d","Title","level","el","h1","h2","h3","levelClass","Typography","default","defaultClasses","Navigator","config","params","queryParams","URLSearchParams","key","set","path","toString","reducer","state","action","loading","signedIn","requestError","SignIn","history","useHistory","useForm","register","handleSubmit","errors","useReducer","dispatch","textError","e","required","useEffect","push","build","login","then","token","debug","catch","aria-invalid","minLength","preventDefault","ImageTransition","image","svg","onComplete","id","src","alt","overlay","Data","F0F","StoreMapUtils","element","fn","slice","call","child","recursiveForEach","attributes","getNamedItem","value","StoreMap","onHover","markedIds","onItemClick","useState","scale","setScale","Controller","transformOrigin","beforeInjection","item","tagName","elementId","getId","classList","add","HOVERABLE_ITEM","onmouseenter","Error","onclick","includes","MARKED_ITEM","Store","marked","setMarked","browserHistory","createBrowserHistory","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8bfd38f5.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"image\":\"ImageTransition_image__2IZn2\",\"overlay-animation\":\"ImageTransition_overlay-animation__2cmwW\",\"image-animation\":\"ImageTransition_image-animation__3XsMH\",\"overlay\":\"ImageTransition_overlay__13QUy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"hoverable-item\":\"StoreMapUtils_hoverable-item__2tfT5\",\"marked-item\":\"StoreMapUtils_marked-item__3xzvz\"};","export class Mock {\n    static login(username: string, password: string): Promise<'token!'> {\n        if (password === '1234') {\n            return new Promise((res) => {\n                setTimeout(() => res('token!'), 1500);\n            });\n        } else {\n            return new Promise((_, rej) => {\n                setTimeout(\n                    () => rej('Not correct password, test \"1234\"'),\n                    1500,\n                );\n            });\n        }\n    }\n}\n","import { OnClickProps } from './Props';\nimport { classnames } from 'tailwindcss-classnames';\n\ntype ButtonSize = 'lg' | 'md' | 'sm';\ntype ButtonType = 'primary' | 'ghost' | 'secondary';\ntype OnClickEvent = React.MouseEvent<HTMLButtonElement, MouseEvent>;\n\ninterface ButtonInput extends OnClickProps<OnClickEvent> {\n    size?: ButtonSize;\n    type?: ButtonType;\n    disable?: boolean;\n    children: string;\n}\n\nexport default function Button(props: ButtonInput) {\n    const {\n        children,\n        size = 'md',\n        onClick,\n        type = 'primary',\n        className,\n        disable,\n    } = props;\n\n    const typeClass: string = {\n        primary: classnames('bg-blue-900', 'hover:bg-blue-500', 'text-white'),\n        secondary: classnames(\n            'hover:shadow',\n            'text-black',\n            'border',\n            'bg-white',\n        ),\n        ghost: '',\n    }[type];\n\n    const sizeClass: string = {\n        md: '',\n        lg: '',\n        sm: '',\n    }[size];\n\n    const defaultClass: string = classnames(\n        'outline-none',\n        'focus:outline-none',\n        'rounded-full',\n        'p-2',\n        'pl-5',\n        'pr-5',\n        'transition-all',\n        'ml-1',\n        'mr-1',\n    );\n\n    const disabled = disable ? classnames('text-opacity-40') : '';\n\n    return (\n        <button\n            onClick={!disable ? onClick : undefined}\n            className={`${defaultClass} ${typeClass} ${sizeClass} ${disabled} ${className}`}\n        >\n            {children}\n        </button>\n    );\n}\n","import { BaseProps } from './Props';\n\ninterface CardInput extends BaseProps {\n    children: React.ReactNode;\n}\n\nexport default function Card(props: CardInput) {\n    const { children, className } = props;\n\n    return <div className={'shadow-md p-10 ' + className}>{children}</div>;\n}\n","import { BaseProps } from './Props';\nimport { classnames } from 'tailwindcss-classnames';\n\nexport default function Divider(props: BaseProps) {\n    const { className } = props;\n\n    const defaultClass: string = classnames('bg-gray-400', 'mb-5', 'mt-5');\n\n    return <hr className={`${defaultClass} ${className}`} />;\n}\n","import { ReactNode } from 'react';\nimport { OnChangeProps } from './Props';\n\ntype OnChangeEvent = React.ChangeEvent<HTMLFormElement>;\ninterface FormInput extends OnChangeProps<OnChangeEvent> {\n    children: ReactNode;\n    onSubmit?: (e: any) => {};\n}\n\nfunction Form(props: FormInput) {\n    const { children, onSubmit, onChange } = props;\n\n    return (\n        <form onChange={onChange} onSubmit={onSubmit}>\n            {children}\n        </form>\n    );\n}\n\nexport default Form;\n","import { classnames } from 'tailwindcss-classnames';\nimport { OnChangeProps } from './Props';\nimport React from 'react';\n\ntype OnChangeEvent = React.ChangeEvent<HTMLInputElement>;\ninterface TextFieldInput extends OnChangeProps<OnChangeEvent> {\n    placeholder?: string;\n    defaultValue?: string;\n    size?: 'lg' | 'md';\n    password?: boolean;\n    name?: string;\n}\n\nexport default React.forwardRef<HTMLInputElement, TextFieldInput>(\n    function TextField(props: TextFieldInput, ref) {\n        const {\n            className,\n            password,\n            placeholder,\n            onChange,\n            size = 'md',\n            defaultValue,\n            name,\n        } = props;\n\n        const defaultClass: string = classnames(\n            'focus:outline-none',\n            'border',\n            'p-1',\n            'rounded',\n            'w-full',\n            'mt-2',\n            'mb-2',\n        );\n\n        const sizeClass: string = {\n            md: '',\n            lg: '',\n        }[size];\n\n        return (\n            <input\n                name={name}\n                ref={ref}\n                placeholder={placeholder}\n                type={password ? 'password' : undefined}\n                className={`${sizeClass} ${defaultClass} ${className}`}\n                defaultValue={defaultValue}\n                onChange={onChange}\n            />\n        );\n    },\n);\n","import Notification from 'rc-notification';\nimport { NotificationInstance } from 'rc-notification/lib/Notification';\nimport { classnames } from 'tailwindcss-classnames';\n\nlet notification: NotificationInstance | null = null;\nNotification.newInstance({}, (n) => (notification = n));\n\ninterface MessageInput {\n    message: string;\n    color?: string;\n    backgroundColor?: string;\n}\n\nfunction showMessage(props: MessageInput) {\n    if (notification)\n        notification.notice({\n            duration: 1.5,\n            style: {\n                transform: 'translate(-50%)',\n                backgroundColor: props.backgroundColor,\n                color: props.color,\n                padding: '0.5em',\n            },\n            className: classnames('shadow'),\n            content: <span>{props.message}</span>,\n            onClose() {\n                console.log('simple close');\n            },\n        });\n    else console.error(notification);\n    return;\n}\n\nconst Message = {\n    success: (message: string) =>\n        showMessage({\n            message,\n            color: 'green',\n            backgroundColor: 'white',\n        }),\n    fail: (message: string) =>\n        showMessage({\n            message,\n            color: 'white',\n            backgroundColor: 'red',\n        }),\n};\n\nexport default Message;\n","import { BaseProps } from './Props';\n\nexport default function Spinner(props: BaseProps) {\n    const { className } = props;\n\n    return (\n        <div className={`${className}`}>\n            <div className=\"animate-spin inline-block\">\n                <svg\n                    viewBox=\"0 0 1024 1024\"\n                    focusable=\"false\"\n                    data-icon=\"loading-3-quarters\"\n                    width=\"3em\"\n                    height=\"3em\"\n                    fill=\"currentColor\"\n                    aria-hidden=\"true\"\n                >\n                    <path d=\"M512 1024c-69.1 0-136.2-13.5-199.3-40.2C251.7 958 197 921 150 874c-47-47-84-101.7-109.8-162.7C13.5 648.2 0 581.1 0 512c0-19.9 16.1-36 36-36s36 16.1 36 36c0 59.4 11.6 117 34.6 171.3 22.2 52.4 53.9 99.5 94.3 139.9 40.4 40.4 87.5 72.2 139.9 94.3C395 940.4 452.6 952 512 952c59.4 0 117-11.6 171.3-34.6 52.4-22.2 99.5-53.9 139.9-94.3 40.4-40.4 72.2-87.5 94.3-139.9C940.4 629 952 571.4 952 512c0-59.4-11.6-117-34.6-171.3a440.45 440.45 0 00-94.3-139.9 437.71 437.71 0 00-139.9-94.3C629 83.6 571.4 72 512 72c-19.9 0-36-16.1-36-36s16.1-36 36-36c69.1 0 136.2 13.5 199.3 40.2C772.3 66 827 103 874 150c47 47 83.9 101.8 109.7 162.7 26.7 63.1 40.2 130.2 40.2 199.3s-13.5 136.2-40.2 199.3C958 772.3 921 827 874 874c-47 47-101.8 83.9-162.7 109.7-63.1 26.8-130.2 40.3-199.3 40.3z\" />\n                </svg>\n            </div>\n        </div>\n    );\n}\n","import { BaseProps } from './Props';\nimport { classnames } from 'tailwindcss-classnames';\n\ninterface TitleInput extends BaseProps {\n    children: React.ReactNode;\n    level?: 'h1' | 'h2' | 'h3';\n}\n\ntype NativeHTMLElementProps = React.DetailedHTMLProps<\n    React.HTMLAttributes<HTMLHeadingElement>,\n    HTMLHeadingElement\n>;\n\nexport default function Title(props: TitleInput) {\n    const { children, className, level = 'h1' } = props;\n\n    const el = {\n        h1: (props: NativeHTMLElementProps) => (\n            <h1 {...props}>{props.children}</h1>\n        ),\n        h2: (props: NativeHTMLElementProps) => (\n            <h2 {...props}>{props.children}</h2>\n        ),\n        h3: (props: NativeHTMLElementProps) => (\n            <h3 {...props}>{props.children}</h3>\n        ),\n    }[level];\n\n    const levelClass = {\n        h1: classnames('text-6xl', 'font-bold'),\n        h2: '',\n        h3: '',\n    }[level];\n\n    const defaultClass: string = classnames('mb-5');\n\n    const config: NativeHTMLElementProps = {\n        className: `${levelClass} ${defaultClass} ${className}`,\n        children: children,\n    };\n\n    return el(config);\n}\n","import { classnames } from 'tailwindcss-classnames';\nimport { BaseProps } from './Props';\n\ntype TypographySize = 'lg' | 'md' | 'sm';\ntype TypographyType = 'error' | 'default';\n\ninterface TypographyInput extends BaseProps {\n    size?: TypographySize;\n    type?: TypographyType;\n    children: React.ReactNode;\n}\n\nexport default function Typography(props: TypographyInput) {\n    const { children, size = 'md', type = 'default', className } = props;\n\n    const sizeClass: string = {\n        md: '',\n        lg: '',\n        sm: '',\n    }[size];\n\n    const typeClass: string = {\n        error: classnames('text-red-500'),\n        default: '',\n    }[type];\n\n    const defaultClasses: string = classnames('text-base');\n\n    return (\n        <p\n            className={`${typeClass} ${sizeClass} ${defaultClasses} ${className}`}\n        >\n            {children}\n        </p>\n    );\n}\n","/**\n *\n */\n\ntype LoginLinkConfig = GenericLinkConfig<'/login', null>;\ntype StoreConfig = GenericLinkConfig<'/store', null>;\ntype DataLinkConfig = GenericLinkConfig<\n    '/data',\n    {\n        username: string;\n    }\n>;\ntype LinkConfig = LoginLinkConfig | DataLinkConfig | StoreConfig;\n\nexport class Navigator {\n    static build(config: LinkConfig) {\n        if ('params' in config && config.params !== null) {\n            const { params } = config as GenericLinkConfig<\n                string,\n                Record<string, string>\n            >;\n            const queryParams = new URLSearchParams();\n\n            for (const key in params) {\n                if (params[key]) queryParams.set(key, params[key]);\n            }\n\n            return `${config.path}?${queryParams.toString()}`;\n        }\n\n        return config.path;\n    }\n}\n\n/**\n *\n * Static types which help out to ensure we create the correct\n * structure of link config\n */\ntype Params = Record<string, string> | null;\ntype ConfigWithParams<T, P extends Params> = {\n    path: T;\n    params: P;\n};\ntype ConfigWithoutParams<T> = {\n    path: T;\n};\ntype GenericLinkConfig<T, P extends Params> = P extends null\n    ? ConfigWithoutParams<T>\n    : ConfigWithParams<T, P>;\n","import { Reducer, useEffect, useReducer } from 'react';\nimport { DeepMap, FieldError, useForm } from 'react-hook-form';\nimport { useHistory } from 'react-router-dom';\nimport { Mock } from 'src/api/Mock';\nimport Button from 'src/components/Button';\nimport Card from 'src/components/Card';\nimport Divider from 'src/components/Divider';\nimport Form from 'src/components/Form';\nimport TextField from 'src/components/Input';\nimport Message from 'src/components/Message';\nimport Spinner from 'src/components/Spinner';\nimport Title from 'src/components/Title';\nimport Typography from 'src/components/Typography';\nimport { Navigator } from 'src/utils/Navigator';\n\ntype FormValues = {\n    username: string;\n    password: string;\n};\n\ntype Action =\n    | { readonly type?: 'request' }\n    | { readonly type?: 'loading' }\n    | { readonly type?: 'success'; username?: any }\n    | { readonly type?: 'failure'; requestError?: string };\n\ntype State = {\n    signedIn?: boolean;\n    username?: string;\n    loading?: boolean;\n    requestError?: string;\n};\n\nconst reducer: Reducer<State, Action> = (\n    state: State,\n    action: Action,\n): State => {\n    switch (action.type) {\n        case 'failure':\n            return {\n                ...state,\n                loading: false,\n                signedIn: undefined,\n                requestError: action.requestError,\n            };\n        case 'loading':\n            return {\n                ...state,\n                requestError: undefined,\n                signedIn: undefined,\n                loading: true,\n            };\n        case 'success':\n            return {\n                ...state,\n                loading: false,\n                signedIn: true,\n                username: action.username,\n                requestError: undefined,\n            };\n    }\n    return state;\n};\n\nexport default function SignIn() {\n    const initialState: State = { loading: false, signedIn: false };\n    const history = useHistory();\n\n    const { register, handleSubmit, errors } = useForm<FormValues>();\n    const [state, dispatch] = useReducer(reducer, initialState);\n\n    const onFormValid = (e: FormValues) => {\n        dispatch({ type: 'loading' });\n        Mock.login(e.username, e.password)\n            .then((token) => {\n                console.debug(`Got token ${token}`);\n                dispatch({ type: 'success', username: e.username });\n            })\n            .catch((e) => {\n                dispatch({ type: 'failure', requestError: e.toString() });\n            });\n    };\n\n    const onFormInvalid = (e: DeepMap<FormValues, FieldError>) => {\n        console.error(e);\n    };\n\n    const textError = (e: FieldError) => {\n        const message: Record<string, string> = {\n            required: 'Field must be filled',\n        };\n\n        return (\n            <Typography type=\"error\">{message[e.type] || e.type}</Typography>\n        );\n    };\n\n    useEffect(() => {\n        if (state.requestError) {\n            Message.fail(state.requestError);\n        }\n\n        if (state.signedIn && state.username) {\n            history.push(\n                Navigator.build({\n                    path: '/data',\n                    params: { username: state.username },\n                }),\n            );\n        }\n    }, [state, history]);\n\n    return (\n        <div className=\"flex h-screen\">\n            <Card className=\"flex w-screen h-screen md:w-3/6 xl:w-2/6 m-auto\">\n                <div className=\"w-11/12 ml-auto mt-20 h-auto \">\n                    <section>\n                        <Form\n                            onSubmit={handleSubmit(onFormValid, onFormInvalid)}\n                        >\n                            <Title level=\"h1\">\n                                sign in\n                                <br />\n                            </Title>\n\n                            <Typography>Username</Typography>\n                            <TextField\n                                aria-invalid={\n                                    errors.username ? 'true' : 'false'\n                                }\n                                ref={register({ required: true })}\n                                name=\"username\"\n                                placeholder=\"username@mail.com\"\n                            />\n                            {errors.username && textError(errors.username)}\n\n                            <Typography>Password</Typography>\n                            <TextField\n                                aria-invalid={\n                                    errors.password ? 'true' : 'false'\n                                }\n                                ref={register({\n                                    minLength: 3,\n                                    required: true,\n                                })}\n                                name=\"password\"\n                                placeholder=\"**********\"\n                                password\n                            />\n                            {errors.password && textError(errors.password)}\n\n                            <Divider />\n                            <div className=\"flow-root\">\n                                <Button className=\"float-right\">Login</Button>\n                                <Button\n                                    className=\"float-right\"\n                                    type=\"secondary\"\n                                    onClick={(e) => {\n                                        e.preventDefault();\n                                        Message.success(\n                                            'You have created a new account!',\n                                        );\n                                    }}\n                                >\n                                    create\n                                </Button>\n                            </div>\n                        </Form>\n                    </section>\n                    <section className=\"flex\">\n                        {state.loading && (\n                            <Spinner className=\"ml-auto mr-auto m-14\" />\n                        )}\n                    </section>\n                </div>\n            </Card>\n        </div>\n    );\n}\n","export default __webpack_public_path__ + \"static/media/items.03a6460a.svg\";","export default __webpack_public_path__ + \"static/media/image.bc958827.png\";","import { useEffect } from 'react';\nimport style from './ImageTransition.module.scss';\n\ninterface ImageTransitionProps {\n    svg: string;\n    image: string;\n    className?: string;\n    onComplete: () => void;\n}\n\nexport function ImageTransition(props: ImageTransitionProps) {\n    const { image, svg, className, onComplete } = props;\n\n    useEffect(() => {\n        setTimeout(onComplete, 5000);\n    }, [onComplete]);\n\n    return (\n        <div className={`${className}`}>\n            <div className=\"relative w-full h-full \">\n                <img\n                    id={style.image}\n                    src={image}\n                    alt=\"background \"\n                    className=\"absolute max-h-full max-w-full transform -translate-x-1/2 left-1/2\"\n                />\n                <img\n                    src={svg}\n                    id={style.overlay}\n                    alt=\"overlay\"\n                    className=\"absolute max-h-full max-w-full transform -translate-x-1/2 left-1/2\"\n                />\n            </div>\n        </div>\n    );\n}\n","import Card from 'src/components/Card';\nimport Divider from 'src/components/Divider';\nimport Title from 'src/components/Title';\nimport Typography from 'src/components/Typography';\nimport Movie from 'src/views/Movie';\nimport overlay from 'src/assets/items.svg';\nimport image from 'src/assets/image.png';\nimport { ImageTransition } from 'src/views/ImageTransition';\nimport Button from 'src/components/Button';\nimport { useHistory } from 'react-router-dom';\nimport { Navigator } from 'src/utils/Navigator';\n\nexport default function Data() {\n    const history = useHistory();\n\n    return (\n        <div className=\"flex\">\n            <Card className=\"w-screen h-screen flex flex-col lg:w-4/6 m-auto\">\n                <Title className=\"flex \" level=\"h1\">\n                    Tolkar din butik...\n                </Title>\n\n                <Divider />\n\n                <ImageTransition\n                    className=\"flex-1 w-full mx-auto text-lg h-full rounded overflow-hidden\"\n                    image={image}\n                    svg={overlay}\n                    onComplete={() => {\n                        history.push(Navigator.build({ path: '/store' }));\n                    }}\n                />\n\n                <div className=\"w-full \">\n                    <Button\n                        className=\"float-right\"\n                        onClick={() => {\n                            history.push(Navigator.build({ path: '/store' }));\n                        }}\n                    >\n                        Gå vidare\n                    </Button>\n                </div>\n            </Card>\n        </div>\n    );\n}\n","import { useHistory } from 'react-router-dom';\nimport Button from 'src/components/Button';\nimport Card from 'src/components/Card';\nimport Divider from 'src/components/Divider';\nimport Title from 'src/components/Title';\nimport Typography from 'src/components/Typography';\nimport { Navigator } from 'src/utils/Navigator';\n\nexport default function F0F() {\n    const history = useHistory();\n\n    return (\n        <div className=\"flex h-screen\">\n            <Card className=\"w-screen h-screen lg:h-4/6 lg:w-2/6 m-auto\">\n                <Title level=\"h1\">\n                    Page not\n                    <br /> found\n                </Title>\n                <Typography>\n                    It seems that you trying to find a page which does not\n                    exist. Please enter one of the following buttons below to be\n                    navigated to a more interesting view\n                </Typography>\n                <Divider />\n                <Button\n                    onClick={(e) => {\n                        history.push(Navigator.build({ path: '/login' }));\n                    }}\n                    className=\"float-right\"\n                >\n                    Go to login\n                </Button>\n            </Card>\n        </div>\n    );\n}\n","import style from './StoreMapUtils.module.scss';\n\nexport class StoreMapUtils {\n    static HOVERABLE_ITEM = style['hoverable-item'];\n    static MARKED_ITEM = style['marked-item'];\n\n    static recursiveForEach(\n        element: SVGElement,\n        fn: (el: SVGElement) => void,\n    ): void {\n        for (const child of [].slice.call(element.children)) {\n            StoreMapUtils.recursiveForEach(child as SVGElement, fn);\n        }\n\n        fn(element);\n    }\n\n    static getId(element: SVGElement): string | undefined {\n        const attributes = element.attributes;\n        const id = attributes.getNamedItem('id')?.value;\n\n        if (!id) {\n            return undefined;\n        }\n\n        return id;\n    }\n}\n","import { FunctionComponent, SVGProps, useState } from 'react';\nimport { ReactSVG } from 'react-svg';\nimport Button from 'src/components/Button';\nimport { StoreMapUtils } from 'src/utils/StoreMapUtils';\n\ninterface ImageTransitionProps {\n    svg: string;\n    className?: string;\n    onHover?: (id: string) => void;\n    onItemClick?: (id: string) => void;\n    markedIds?: string[];\n}\n\nexport function StoreMap(props: ImageTransitionProps) {\n    const { svg, className, onHover, markedIds, onItemClick } = props;\n    const [scale, setScale] = useState(1.5);\n\n    const Controller = () => {\n        return (\n            <div className=\"float-right fixed z-10\">\n                <Button\n                    disable={scale > 2}\n                    onClick={() => {\n                        setScale(scale + 0.25);\n                    }}\n                    type=\"secondary\"\n                >\n                    +\n                </Button>\n                <Button\n                    disable={scale < 0.5}\n                    onClick={() => {\n                        setScale(scale - 0.25);\n                    }}\n                    type=\"secondary\"\n                >\n                    -\n                </Button>\n            </div>\n        );\n    };\n\n    return (\n        <div className={`relative ${className} `}>\n            <Controller></Controller>\n            <ReactSVG\n                src={svg}\n                style={{\n                    transform: `scale(${scale}, ${scale})`,\n                    transformOrigin: 'left top',\n                }}\n                beforeInjection={(item) => {\n                    StoreMapUtils.recursiveForEach(item, (el) => {\n                        if (el.tagName === 'rect' || el.tagName === 'circle') {\n                            const elementId = StoreMapUtils.getId(el);\n\n                            el.classList.add(StoreMapUtils.HOVERABLE_ITEM);\n\n                            if (onHover) {\n                                el.onmouseenter = (e) => {\n                                    if (!elementId) {\n                                        throw new Error(\n                                            'Not able to hook a listener onto object without id.',\n                                        );\n                                    }\n\n                                    onHover(elementId);\n                                };\n                            }\n\n                            if (onItemClick) {\n                                el.onclick = (e) => {\n                                    if (!elementId) {\n                                        throw new Error(\n                                            'Not able to hook a listener onto object without id.',\n                                        );\n                                    }\n\n                                    onItemClick(elementId);\n                                };\n                            }\n\n                            if (elementId && markedIds?.includes(elementId)) {\n                                el.classList.add(StoreMapUtils.MARKED_ITEM);\n                            }\n                        }\n                    });\n                }}\n            />\n        </div>\n    );\n}\n","import React, { useState } from 'react';\nimport Card from 'src/components/Card';\nimport Divider from 'src/components/Divider';\nimport Title from 'src/components/Title';\nimport { StoreMap } from 'src/views/StoreMap';\nimport svg from 'src/assets/items.svg';\n\nexport default function Store() {\n    const [marked, setMarked] = useState<string[]>([]);\n\n    return (\n        <Card className=\"w-screen h-screen flex flex-col lg:w-11/12 m-auto\">\n            <Title className=\"flex \" level=\"h1\">\n                Din butik\n            </Title>\n\n            <Divider />\n            <div className=\"flex-1 w-full mx-auto text-lg h-full rounded overflow-scroll\">\n                <StoreMap\n                    onItemClick={(id) => {\n                        console.log(id);\n                        if (!marked.includes(id)) setMarked([...marked, id]);\n                    }}\n                    markedIds={marked}\n                    svg={svg}\n                />\n            </div>\n        </Card>\n    );\n}\n","import { Route, Router, Switch } from 'react-router-dom';\nimport { createBrowserHistory } from 'history';\nimport SignIn from './pages/SignIn';\nimport Data from './pages/Data';\nimport F0F from './pages/404';\nimport Store from './pages/Store';\n\nexport const browserHistory = createBrowserHistory();\n\nexport default function App() {\n    return (\n        <Router history={browserHistory}>\n            <Switch>\n                <Route path=\"/login\">\n                    <SignIn />\n                </Route>\n                <Route path=\"/data\">\n                    <Data />\n                </Route>\n                <Route path=\"/store\">\n                    <Store />\n                </Route>\n                <Route path=\"\">\n                    <F0F />\n                </Route>\n            </Switch>\n        </Router>\n    );\n}\n","import App from './App';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport 'rc-notification/assets/index.css';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n"],"sourceRoot":""}